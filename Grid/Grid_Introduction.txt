1. When we have Two dimensional layout , we can make use of Grid.
2.A container can be made grid by setting the display property to grid.
  .container{
    display:grid
  }
The following are Grid container parent properties:
1. row-gap:20px;
  This property is used to specify a gap between the rows.
2. column-gap:20px;
  This property is used to specify a gap between the columns.
3. gap:20px 5px ; 
  This property is a shorthand for both the columns and rows.
  This will set the row-gap to 20px and column gap to 5px.
4.grid-template-columns: 100px 200px 300px 
  Above property will give us 3 columns of height 100px , 200px and 300px respectively , since we have specified the units 3 times.
  We can use any unit we want.

  fr unit can be used for columns of same size.Suppose we want 4 columns of same size we can use following
  grid-template-columns : 1fr 1fr 1fr 1fr;
  There is also a shorthand for above property 
  grid-template-columns : repeat(4 , 1fr);
  We can use any unit instead of fr

5.grid-tempate-rows: 200px 80px ;
  Suppose we have 5 rows , we can use above syntax to use specify the height of first 2 rows , and remaining rows will have 
  default or padding values since we are assigning values to only 2 rows.

6.Having applied above property , we may feel need to set the height of remaining rows to some specific height , in such case , we 
  can use grid-auto-rows: method 
  Example : grid-auto-rows : 150px ; 
    This will set the values of all the remaining rows to 150px.

7. justify-content: It has the same functioning as it has in flexbox.
8. align-content: It has the same functioning as it has in flexbox.

GRID CHILD ITEMS:
1. justify-self:
  #box-1{
      justify-self:start;
  }
  This will horizontally position the box-1  inside the container to start.(This will not affect other boxes since it is child item.
2. align-self:
  #box-1{
      align-self:start;
  }
  This will vertically position the box-1  inside the container to start.(This will not affect other boxes since it is child item.)

3.grid-column:
  grid-column-start : 1;
  grid-column-end : 3;
  i.  Above properties will span column 1 from column 2 , so the box 1 will occupy 2 columns 
  ii. There is also a shorthand  for above property:
  iii.  grid-column : 1 / 3 (This occupies 2 boxes)
  iv.  grid-column : 1 / span 2 (span 2 means we decide the number of columns we want to span.
  v. If you want to span entire column rather than remembering no of columns you can do following
    grid-column : 1 /-1;

4.grid-row: same as grid column

5.grid-area: rowStart columnStart rowEnd columnEnd;
  The above property is a shorthand for grid-column as well as grid column together.
  Example :  grid-area : 1/1/3/3;

6.grid-template-areas : "header header header header"
                         "sidebar mainbody"
                          "footer advertisement footer"
  You can assign name items and grid will align accordingly.
  
